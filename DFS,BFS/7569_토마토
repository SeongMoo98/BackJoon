import java.io.*;
import java.lang.reflect.Array;
import java.util.*;
import static java.lang.Math.*;

public class Main {
    private final static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    private final static StringBuilder sb = new StringBuilder();



    // 위,아래,왼쪽,오른쪽,앞,뒤가 익은 토마토에 의해 익는다
    // 모든 토마토가 익는 최소 일수
    // 토마토가 없을수도 있다

    // M : 가로, N : 세로, H : 상자의 수
    static int N,M,H;
    static int[][][] board;
    
    /**상,하,좌,우,위,아래**/
    static int[] dx = {-1,0,1,0,0,0};
    static int[] dy ={0,1,0,-1,0,0};
    static int[] dz = {0,0,0,0,1,-1};

    // 1 : 익은 토마토, 0 : 익지않은 토마토, -1 : 토마토가 들어있지 않다

    private static int solve(int[][][] board, Queue<Tomato> q){

        while(!q.isEmpty()){
            Tomato curr_tomato = q.remove();

            int x = curr_tomato.x;
            int y = curr_tomato.y;
            int z = curr_tomato.z;

            for(int i=0; i<6; i++){
                int nx = x + dx[i];
                int ny = y + dy[i];
                int nz = z + dz[i];

                if(nx>=0 && ny>=0 && nz>=0 && nx<N && ny<M && nz<H){
                    if(board[nz][nx][ny] == 0){
                        q.add(new Tomato(nz,nx,ny));

                        /** 익은 날짜를 얻기 위해 그 전 값에서 1 증가 **/
                        board[nz][nx][ny] = board[z][x][y] + 1;
                    }
                }
            }
        }

        int ans = Integer.MIN_VALUE;

        for(int i=0; i<H; i++) {
            for (int j = 0; j < N; j++) {
                for(int k=0; k<M; k++){
                    // 토마도가 안익은게 있다면
                    if(board[i][j][k] == 0) return -1;

                    ans = Math.max(ans, board[i][j][k]);
                }
            }
        }
        if(ans == 1) return 0;
        else return ans-1;

    }
    static class Tomato{
        int x,y,z;
        public Tomato(int z, int x, int y){
            this.x = x;
            this.y = y;
            this.z = z;
        }

    }
    public static void main(String[] args) throws IOException {
        String[] input = br.readLine().split(" ");
        M = Integer.parseInt(input[0]);
        N = Integer.parseInt(input[1]);
        H = Integer.parseInt(input[2]);

        board = new int[H][N][M];

        String[] Tomato_input;
        Queue<Tomato> q = new LinkedList<>();
        for(int i=0; i<H; i++) {
            for (int j = 0; j < N; j++) {
                Tomato_input = br.readLine().split(" ");
                for(int k=0; k<M; k++){
                    int val = Integer.parseInt(Tomato_input[k]);
                    board[i][j][k] = val;
                    if(val == 1) q.add(new Tomato(i,j,k));
                }
            }

        }

        System.out.println(solve(board,q));

    }

}
