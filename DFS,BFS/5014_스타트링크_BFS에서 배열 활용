import java.io.*;
import java.lang.reflect.Array;
import java.util.*;
import static java.lang.Math.*;

public class Main {
    private final static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    final static Scanner sc = new Scanner(System.in);
    private final static StringBuilder sb = new StringBuilder();

    // 5014 스타트링크
    static int F; // 층
    static int G; // 스타트링크가 있는 곳
    static int S; // 현재 있는 곳
    static int U, D; // 위로 U층, 아래로 D층 갈 수 있다
    static int[] floor;
    //G층에 도착하려면 버튼을 적어도 몇번 눌러야하는지 최소값
    //엘레베이터를 통해 갈 수 없으면 "use the stairs"

    private static void BFS(){
        Queue<Integer> q = new LinkedList<>();
        q.add(S);

        while(!q.isEmpty()){
            int curr = q.poll();

            int next;

            for(int i=0; i<2; i++){
                if(i == 0) next = curr - D;
                else next = curr + U;

                if( next == curr ) continue;

                if(next == G){
                    floor[next] = floor[curr] + 1;
                    return;
                }


                if(next > 0 && next < floor.length && floor[next] == 0){
                    q.add(next);
                    floor[next] = floor[curr] + 1;
                }
            }
        }
    }

    public static void main(String[] args) throws IOException {
        F = sc.nextInt();
        S = sc.nextInt();
        G = sc.nextInt();
        U = sc.nextInt();
        D = sc.nextInt();

        floor = new int[F+1];

        if(S == G) {
            System.out.println(0);
            return;
        }

        BFS();
        if(floor[G] == 0){
            System.out.println("use the stairs");
        }
        else System.out.println(floor[G]);


    }
}
