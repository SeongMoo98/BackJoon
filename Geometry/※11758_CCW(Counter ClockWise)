import java.io.*;
import java.lang.reflect.Array;
import java.util.*;
import static java.lang.Math.*;



public class Main {
    private final static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    final static Scanner sc = new Scanner(System.in);
    private final static StringBuilder sb = new StringBuilder();

    // CCW ( Counter Clockwise )
    // 평면 위에 놓여진 세 점의 방향관계를 구할 수 있는 알고리즘
    // CCW는 점 A, B, C를 순서대로 봤을 때
    // 반시계방향이면 양수, 시계방향이면 음수, 평행하게 놓여있으면 0을 반환한다
    // 기준점 A에서 벡터 AB를 a 벡터, 벡터 AC를 b 벡터라 하면 ( A 점이 중간 )
    // a 벡터와 b 벡터의 외적의 방향으로 판단할 수 있다
    // a X b = (|a| * |b| * sin@) 내적 n 벡터 ( n 벡터 : a, b 벡터에 모두 수직인 벡터 @ : a,b 벡터 사이각 )
    //       = (a2b3 - a3b2)i + (a3b1 - a1b3)j + (a1b2 - a2b1)k
    //       = 0i + 0j + (a1b2 - a2b1)k

    // a 벡터를 이동시켜보면 외적값이 양수일 때 반시계방향임을 알 수 있다

    private static int cross_product(int[] vec1, int[] vec2){
        return (vec1[0]*vec2[1] - vec1[1]*vec2[0]);
    }
    public static void main(String[] args) throws IOException {
        int P1_X, P1_Y;
        int P2_X, P2_Y;
        int P3_X, P3_Y;

        P1_X = sc.nextInt(); P1_Y=sc.nextInt();
        P2_X = sc.nextInt(); P2_Y=sc.nextInt();
        P3_X = sc.nextInt(); P3_Y=sc.nextInt();

        int[] vec1 = {P2_X - P1_X, P2_Y - P1_Y};
        int[] vec2 = {P3_X - P2_X, P3_Y - P2_Y};

        int result = cross_product(vec1, vec2);

        if(result > 0) System.out.println(1);
        else if(result < 0) System.out.println(-1);
        else System.out.println(0);
    }
}
